---
// Get the base URL for the Worker
const isDev = import.meta.env.DEV;
const isPreview = import.meta.env.SITE?.includes('pages.dev');
const currentHost = import.meta.env.SITE || 'jonnyburch.com';
const workerUrl = isDev
  ? 'http://localhost:8787'
  : `https://${currentHost}`;

console.log('Environment:', { isDev, isPreview, currentHost, workerUrl });
---

<form id="subscribe-form" class="flex flex-col md:flex-row gap-2">
  <input
    type="text"
    id="name"
    name="name"
    placeholder="Name"
    required
    class="px-3 py-2 border-2 border-aubergine-700"
  />
  <input
    type="email"
    id="email"
    name="email"
    placeholder="Email"
    required
    class="px-3 py-2 border-2 border-aubergine-700"
  />
  <button
    type="submit"
    class="bg-aubergine-700 text-white px-3 py-2 cursor-pointer"
  >
    Subscribe
  </button>
</form>

<div
  id="success-message"
  class="hidden mt-4 p-4 bg-peach-100 text-aubergine-700"
>
  Thanks for subscribing!
</div>

<div
  id="error-message"
  class="hidden mt-4 p-4 bg-peach-100 text-aubergine-700"
>
</div>

<script define:vars={{ workerUrl }}>
  const form = document.getElementById('subscribe-form');
  const successMessage = document.getElementById('success-message');
  const errorMessage = document.getElementById('error-message');

  if (!form || !successMessage || !errorMessage) {
    console.error('Required form elements not found');
    throw new Error('Required form elements not found');
  }

  if (!(form instanceof HTMLFormElement)) {
    console.error('Form element is not an HTMLFormElement');
    throw new Error('Invalid form element');
  }

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    errorMessage.classList.add('hidden');
    successMessage.classList.add('hidden');

    const formData = new FormData(form);
    const name = formData.get('name')?.toString() || '';
    const email = formData.get('email')?.toString() || '';

    if (!name || !email) {
      errorMessage.textContent = 'Please fill in all fields';
      errorMessage.classList.remove('hidden');
      return;
    }

    try {
      const response = await fetch(`${workerUrl}/subscribe`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ name, email })
      });

      if (!response.ok) {
        const data = await response.json();
        throw new Error(data.error || 'Failed to subscribe');
      }

      // Clear the form
      form.reset();

      // Show success message
      successMessage.classList.remove('hidden');
      setTimeout(() => {
        successMessage.classList.add('hidden');
      }, 5000);

    } catch (error) {
      console.error('Error:', error);
      errorMessage.textContent = error instanceof Error ? error.message : 'Something went wrong. Please try again later.';
      errorMessage.classList.remove('hidden');
    }
  });
</script>